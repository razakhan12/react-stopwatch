{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","start","setState","state","btnstate","milliseconds","seconds","minute","interval","setInterval","tick","reset","pauseStartTimer","bind","this","clearInterval","style","textAlign","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,kJCmH5BC,G,mCA5Gb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAkCRC,MAAQ,WACN,EAAKC,UAAS,SAAAC,GAAK,MACf,CACCC,SAAU,QACVC,aAAc,EACdC,QAAQ,EACRC,OAAO,MAEZ,EAAKC,SAAWC,aAAY,WAC5B,EAAKC,SACF,KA7Cc,EA0ErBC,MAAQ,WAEN,EAAKT,UAAS,SAAAC,GAAK,MACf,CACCC,SAAU,QACVC,aAAa,EACbC,QAAQ,EACRC,OAAO,OA/EV,EAAKK,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKV,MAAQ,CACXG,QAAS,KACTD,aAAc,KACdE,OAAQ,KACRH,SAAU,SAPK,E,wGAgBjBU,KAAKZ,UAAS,SAAAC,GAAK,MAAK,CACtBE,aAAcF,EAAME,aAAe,MAEN,MAA5BS,KAAKX,MAAME,cAEZS,KAAKZ,UAAS,SAAAC,GAAK,MAAK,CACtBG,QAASH,EAAMG,QAAU,EACzBD,aAAc,MAGQ,KAAvBS,KAAKX,MAAMG,SAEZQ,KAAKZ,UAAS,SAAAC,GAAK,MAAK,CACtBG,QAAS,EACTC,OAAQJ,EAAMI,OAAS,Q,6CAmB3BQ,cAAcD,KAAKN,Y,wCAItB,IAAD,OAC6B,UAAxBM,KAAKX,MAAMC,UAEZU,KAAKZ,UAAS,SAAAC,GAAK,MACf,CACCC,SAAU,aAEfW,cAAcD,KAAKN,WAGW,WAAxBM,KAAKX,MAAMC,WAEjBU,KAAKZ,UAAS,SAAAC,GAAK,MAChB,CACCC,SAAU,YAEdU,KAAKN,SAAWC,aAAY,WAC1B,EAAKC,SACF,O,+BAeL,OACE,6BACE,yBAAOM,MAAO,CAClBC,UAAU,WACN,2BAAKH,KAAKX,MAAMI,OAAhB,MAA2BO,KAAKX,MAAMG,QAAtC,MAAkDQ,KAAKX,MAAME,eAE9D,yBAAKW,MAAO,CACfC,UAAU,WAAW,4BAAQC,QAASJ,KAAKF,iBAClCE,KAAKX,MAAMC,UAEd,4BAAQc,QAASJ,KAAKH,OAAtB,SAGA,4BAAQO,QAASJ,KAAKb,OAAtB,e,GApGQkB,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df6101ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min'\nimport $ from 'jquery';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pauseStartTimer = this.pauseStartTimer.bind(this);\n    this.state = { \n      seconds: \"SS\" , \n      milliseconds: \"MS\",\n      minute: \"MN\",\n      btnstate: \"Pause\"\n    };\n  }\n\n transNum()\n {\n }\n \n  tick() {\n    this.setState(state => ({\n      milliseconds: state.milliseconds + 1\n    }));\n    if(this.state.milliseconds === 100)\n    {\n      this.setState(state => ({\n        seconds: state.seconds + 1,\n        milliseconds: 0\n      }));\n    }\n    if(this.state.seconds === 60)\n    {\n      this.setState(state => ({\n        seconds: 0,\n        minute: state.minute + 1\n      }));\n    }\n  }\n\n  start = () => {\n    this.setState(state =>\n      ( {\n         btnstate: \"Pause\",\n         milliseconds: 0,\n         seconds:0,\n         minute:0\n       }));\n    this.interval = setInterval(() => {\n    this.tick()\n    }, 10);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\npauseStartTimer  () \n{\n  if(this.state.btnstate === \"Pause\")\n  {\n    this.setState(state =>\n      ( {\n         btnstate: \"Resume\"\n       }));\n    clearInterval(this.interval);\n    \n  }\n  else if(this.state.btnstate === \"Resume\")\n  {\n    this.setState(state =>\n      ({ \n        btnstate: \"Pause\"\n      }));\n    this.interval = setInterval(() => {\n      this.tick()\n      }, 10);\n  }\n}\nreset = () =>\n{\n  this.setState(state =>\n    ( {\n       btnstate: \"Pause\",\n       milliseconds:0,\n       seconds:0,\n       minute:0\n     }));\n}\n\n  render() {\n    return (\n      <div>\n        <div   style={{\n    textAlign:\"center\"}}> \n        <p >{this.state.minute} : {this.state.seconds} : {this.state.milliseconds}</p> \n        </div>\n       <div style={{\n    textAlign:\"center\"}}><button onClick={this.pauseStartTimer}>\n            {this.state.btnstate}\n          </button> \n          <button onClick={this.reset}>\n            Reset\n          </button>\n          <button onClick={this.start}>\n            Start\n          </button></div> \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}